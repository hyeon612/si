{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nconst useRandomSentence = () => {\n  _s();\n  const [usedSentences, setUsedSentences] = useState(new Set());\n  const getRandomSentence = useCallback((category = 'all', customSentences = []) => {\n    let availableSentences = customSentences;\n\n    // 저장된 문장이 없으면 null 반환\n    if (availableSentences.length === 0) {\n      return null;\n    }\n    if (category !== 'all') {\n      availableSentences = availableSentences.filter(sentence => sentence.category === category);\n    }\n\n    // 해당 카테고리에 문장이 없으면 null 반환\n    if (availableSentences.length === 0) {\n      return null;\n    }\n\n    // 사용하지 않은 문장들 필터링\n    const unusedSentences = availableSentences.filter(sentence => !usedSentences.has(sentence.id));\n\n    // 모든 문장을 사용했다면 초기화\n    if (unusedSentences.length === 0) {\n      setUsedSentences(new Set());\n      return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n    }\n\n    // 랜덤하게 문장 선택\n    const randomSentence = unusedSentences[Math.floor(Math.random() * unusedSentences.length)];\n\n    // 사용된 문장으로 마킹\n    setUsedSentences(prev => new Set([...prev, randomSentence.id]));\n    return randomSentence;\n  }, [usedSentences]);\n  const resetUsedSentences = useCallback(() => {\n    setUsedSentences(new Set());\n  }, []);\n  return {\n    getRandomSentence,\n    resetUsedSentences\n  };\n};\n_s(useRandomSentence, \"7rP3cY0cFCU9PaOCFxIbV52XqmM=\");\nexport default useRandomSentence;","map":{"version":3,"names":["useState","useCallback","useRandomSentence","_s","usedSentences","setUsedSentences","Set","getRandomSentence","category","customSentences","availableSentences","length","filter","sentence","unusedSentences","has","id","Math","floor","random","randomSentence","prev","resetUsedSentences"],"sources":["C:/Users/Administrator/Downloads/si/sentence-island/src/hooks/useRandomSentence.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useRandomSentence = () => {\n  const [usedSentences, setUsedSentences] = useState(new Set());\n\n  const getRandomSentence = useCallback((category = 'all', customSentences = []) => {\n    let availableSentences = customSentences;\n    \n    // 저장된 문장이 없으면 null 반환\n    if (availableSentences.length === 0) {\n      return null;\n    }\n    \n    if (category !== 'all') {\n      availableSentences = availableSentences.filter(sentence => sentence.category === category);\n    }\n    \n    // 해당 카테고리에 문장이 없으면 null 반환\n    if (availableSentences.length === 0) {\n      return null;\n    }\n    \n    // 사용하지 않은 문장들 필터링\n    const unusedSentences = availableSentences.filter(\n      sentence => !usedSentences.has(sentence.id)\n    );\n    \n    // 모든 문장을 사용했다면 초기화\n    if (unusedSentences.length === 0) {\n      setUsedSentences(new Set());\n      return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n    }\n    \n    // 랜덤하게 문장 선택\n    const randomSentence = unusedSentences[Math.floor(Math.random() * unusedSentences.length)];\n    \n    // 사용된 문장으로 마킹\n    setUsedSentences(prev => new Set([...prev, randomSentence.id]));\n    \n    return randomSentence;\n  }, [usedSentences]);\n\n  const resetUsedSentences = useCallback(() => {\n    setUsedSentences(new Set());\n  }, []);\n\n  return { getRandomSentence, resetUsedSentences };\n};\n\nexport default useRandomSentence;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,IAAIM,GAAG,CAAC,CAAC,CAAC;EAE7D,MAAMC,iBAAiB,GAAGN,WAAW,CAAC,CAACO,QAAQ,GAAG,KAAK,EAAEC,eAAe,GAAG,EAAE,KAAK;IAChF,IAAIC,kBAAkB,GAAGD,eAAe;;IAExC;IACA,IAAIC,kBAAkB,CAACC,MAAM,KAAK,CAAC,EAAE;MACnC,OAAO,IAAI;IACb;IAEA,IAAIH,QAAQ,KAAK,KAAK,EAAE;MACtBE,kBAAkB,GAAGA,kBAAkB,CAACE,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IAC5F;;IAEA;IACA,IAAIE,kBAAkB,CAACC,MAAM,KAAK,CAAC,EAAE;MACnC,OAAO,IAAI;IACb;;IAEA;IACA,MAAMG,eAAe,GAAGJ,kBAAkB,CAACE,MAAM,CAC/CC,QAAQ,IAAI,CAACT,aAAa,CAACW,GAAG,CAACF,QAAQ,CAACG,EAAE,CAC5C,CAAC;;IAED;IACA,IAAIF,eAAe,CAACH,MAAM,KAAK,CAAC,EAAE;MAChCN,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;MAC3B,OAAOI,kBAAkB,CAACO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGT,kBAAkB,CAACC,MAAM,CAAC,CAAC;IAClF;;IAEA;IACA,MAAMS,cAAc,GAAGN,eAAe,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,eAAe,CAACH,MAAM,CAAC,CAAC;;IAE1F;IACAN,gBAAgB,CAACgB,IAAI,IAAI,IAAIf,GAAG,CAAC,CAAC,GAAGe,IAAI,EAAED,cAAc,CAACJ,EAAE,CAAC,CAAC,CAAC;IAE/D,OAAOI,cAAc;EACvB,CAAC,EAAE,CAAChB,aAAa,CAAC,CAAC;EAEnB,MAAMkB,kBAAkB,GAAGrB,WAAW,CAAC,MAAM;IAC3CI,gBAAgB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEC,iBAAiB;IAAEe;EAAmB,CAAC;AAClD,CAAC;AAACnB,EAAA,CA7CID,iBAAiB;AA+CvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
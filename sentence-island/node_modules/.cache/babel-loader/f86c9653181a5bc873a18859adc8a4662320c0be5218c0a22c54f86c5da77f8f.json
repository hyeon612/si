{"ast":null,"code":"import{useState,useCallback}from'react';import{sentences}from'../data/sentences';const useRandomSentence=()=>{const[usedSentences,setUsedSentences]=useState(new Set());const getRandomSentence=useCallback(function(){let category=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';let availableSentences=sentences;if(category!=='all'){availableSentences=sentences.filter(sentence=>sentence.category===category);}// 사용하지 않은 문장들 필터링\nconst unusedSentences=availableSentences.filter(sentence=>!usedSentences.has(sentence.id));// 모든 문장을 사용했다면 초기화\nif(unusedSentences.length===0){setUsedSentences(new Set());return availableSentences[Math.floor(Math.random()*availableSentences.length)];}// 랜덤하게 문장 선택\nconst randomSentence=unusedSentences[Math.floor(Math.random()*unusedSentences.length)];// 사용된 문장으로 마킹\nsetUsedSentences(prev=>new Set([...prev,randomSentence.id]));return randomSentence;},[usedSentences]);const resetUsedSentences=useCallback(()=>{setUsedSentences(new Set());},[]);return{getRandomSentence,resetUsedSentences};};export default useRandomSentence;","map":{"version":3,"names":["useState","useCallback","sentences","useRandomSentence","usedSentences","setUsedSentences","Set","getRandomSentence","category","arguments","length","undefined","availableSentences","filter","sentence","unusedSentences","has","id","Math","floor","random","randomSentence","prev","resetUsedSentences"],"sources":["/mnt/c/Users/Administrator/Downloads/si/sentence-island/src/hooks/useRandomSentence.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { sentences } from '../data/sentences';\n\nconst useRandomSentence = () => {\n  const [usedSentences, setUsedSentences] = useState(new Set());\n\n  const getRandomSentence = useCallback((category = 'all') => {\n    let availableSentences = sentences;\n    \n    if (category !== 'all') {\n      availableSentences = sentences.filter(sentence => sentence.category === category);\n    }\n    \n    // 사용하지 않은 문장들 필터링\n    const unusedSentences = availableSentences.filter(\n      sentence => !usedSentences.has(sentence.id)\n    );\n    \n    // 모든 문장을 사용했다면 초기화\n    if (unusedSentences.length === 0) {\n      setUsedSentences(new Set());\n      return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n    }\n    \n    // 랜덤하게 문장 선택\n    const randomSentence = unusedSentences[Math.floor(Math.random() * unusedSentences.length)];\n    \n    // 사용된 문장으로 마킹\n    setUsedSentences(prev => new Set([...prev, randomSentence.id]));\n    \n    return randomSentence;\n  }, [usedSentences]);\n\n  const resetUsedSentences = useCallback(() => {\n    setUsedSentences(new Set());\n  }, []);\n\n  return { getRandomSentence, resetUsedSentences };\n};\n\nexport default useRandomSentence;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAC7C,OAASC,SAAS,KAAQ,mBAAmB,CAE7C,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGL,QAAQ,CAAC,GAAI,CAAAM,GAAG,CAAC,CAAC,CAAC,CAE7D,KAAM,CAAAC,iBAAiB,CAAGN,WAAW,CAAC,UAAsB,IAArB,CAAAO,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CACrD,GAAI,CAAAG,kBAAkB,CAAGV,SAAS,CAElC,GAAIM,QAAQ,GAAK,KAAK,CAAE,CACtBI,kBAAkB,CAAGV,SAAS,CAACW,MAAM,CAACC,QAAQ,EAAIA,QAAQ,CAACN,QAAQ,GAAKA,QAAQ,CAAC,CACnF,CAEA;AACA,KAAM,CAAAO,eAAe,CAAGH,kBAAkB,CAACC,MAAM,CAC/CC,QAAQ,EAAI,CAACV,aAAa,CAACY,GAAG,CAACF,QAAQ,CAACG,EAAE,CAC5C,CAAC,CAED;AACA,GAAIF,eAAe,CAACL,MAAM,GAAK,CAAC,CAAE,CAChCL,gBAAgB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CAC3B,MAAO,CAAAM,kBAAkB,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGR,kBAAkB,CAACF,MAAM,CAAC,CAAC,CAClF,CAEA;AACA,KAAM,CAAAW,cAAc,CAAGN,eAAe,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGL,eAAe,CAACL,MAAM,CAAC,CAAC,CAE1F;AACAL,gBAAgB,CAACiB,IAAI,EAAI,GAAI,CAAAhB,GAAG,CAAC,CAAC,GAAGgB,IAAI,CAAED,cAAc,CAACJ,EAAE,CAAC,CAAC,CAAC,CAE/D,MAAO,CAAAI,cAAc,CACvB,CAAC,CAAE,CAACjB,aAAa,CAAC,CAAC,CAEnB,KAAM,CAAAmB,kBAAkB,CAAGtB,WAAW,CAAC,IAAM,CAC3CI,gBAAgB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CAC7B,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEC,iBAAiB,CAAEgB,kBAAmB,CAAC,CAClD,CAAC,CAED,cAAe,CAAApB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}